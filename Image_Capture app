import cv2
import os
import numpy as np
import time
import mediapipe as mp

# ===== CONFIG =====
base_dir = "captured_dataset"
image_size = (64, 64)
delay_between_captures = 0.5  # seconds between each of 50 captures
# ===================

cap = cv2.VideoCapture(0)
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=2, min_detection_confidence=0.7)
mp_draw = mp.solutions.drawing_utils

current_class = "A"

def get_class_type(label):
    if label.isdigit():
        return "Numbers"
    elif label.isalpha():
        return "Letters"
    return None

def get_save_count(folder_type, label):
    folder_path = os.path.join(base_dir, folder_type, label)
    if not os.path.exists(folder_path):
        return 0
    return len([f for f in os.listdir(folder_path) if f.endswith(".jpg")])

def crop_combined_hands(image, hand_landmarks_list):
    h, w, _ = image.shape
    x_all, y_all = [], []

    for hand_landmarks in hand_landmarks_list:
        for landmark_point in hand_landmarks.landmark:
            x_all.append(landmark_point.x * w)
            y_all.append(landmark_point.y * h)

    if not x_all or not y_all:
        return None

    x_min, x_max = int(min(x_all)), int(max(x_all))
    y_min, y_max = int(min(y_all)), int(max(y_all))
    padding = 20
    return image[max(0, y_min - padding):min(h, y_max + padding), max(0, x_min - padding):min(w, x_max + padding)]


def auto_capture_50_images(capture_class, folder_type):
    print(" Capturing 50 images (0.5 sec between each)...")
    captured = 0
    while captured < 50:
        ret_cap, frame_cap = cap.read()
        if not ret_cap:
            break
        frame_cap = cv2.flip(frame_cap, 1)
        rgb_cap = cv2.cvtColor(frame_cap, cv2.COLOR_BGR2RGB)
        results_cap = hands.process(rgb_cap)
        if results_cap.multi_hand_landmarks:
            cropped = crop_combined_hands(frame_cap, results_cap.multi_hand_landmarks)
            if cropped is not None:
                save_path = os.path.join(base_dir, folder_type, capture_class)
                os.makedirs(save_path, exist_ok=True)
                resized = cv2.resize(cropped, image_size)
                filename = f"{capture_class}_{int(time.time() * 1000)}.jpg"
                cv2.imwrite(os.path.join(save_path, filename), resized)
                print(f"ðŸ“¸ Saved ({captured+1}/50): {filename}")
                captured += 1
        time.sleep(delay_between_captures)


print("INSTRUCTIONS:")
print(" - Press a letter key (A-Z) or number (0-9) to set class label.")
print(" - Press SPACE to capture 50 cropped hand images (0.5 sec each).")
print(" - Press 'q' to quit.")

while True:
    ret, frame = cap.read()
    if not ret:
        break

    frame = cv2.flip(frame, 1)
    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(rgb)
    display_frame = frame.copy()
    cropped_hand = None

    if results.multi_hand_landmarks:
        for lm in results.multi_hand_landmarks:
            mp_draw.draw_landmarks(display_frame, lm, mp_hands.HAND_CONNECTIONS)

    # UI display
    class_type = get_class_type(current_class)
    save_count = get_save_count(class_type, current_class) if class_type else 0
    cv2.putText(display_frame, f"Class: {current_class}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)
    cv2.putText(display_frame, f"Saved: {save_count}", (display_frame.shape[1] - 250, 30), cv2.FONT_HERSHEY_SIMPLEX, 1,
                (0, 200, 0), 2)

    cv2.imshow("MediaPipe Hand Capture", display_frame)

    key = cv2.waitKey(1)

    if key == ord('q'):
        break

    # SPACE to capture 50 images with 0.5 sec interval
    elif key == 32 and class_type:
        auto_capture_50_images(current_class, class_type)

    # Class switching
    elif key != -1:
        try:
            new_class = chr(key).upper()
            if new_class.isalnum():
                current_class = new_class
                print(f" Switched to class: {current_class}")
        except ValueError:
            pass

cap.release()
cv2.destroyAllWindows()
hands.close()
